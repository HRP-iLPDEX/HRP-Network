// This file is part of the SORA network and Polkaswap app.

// Copyright (c) 2020, 2021, Polka Biome Ltd. All rights reserved.
// SPDX-License-Identifier: BSD-4-Clause

// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:

// Redistributions of source code must retain the above copyright notice, this list
// of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice, this
// list of conditions and the following disclaimer in the documentation and/or other
// materials provided with the distribution.
//
// All advertising materials mentioning features or use of this software must display
// the following acknowledgement: This product includes software developed by Polka Biome
// Ltd., SORA, and Polkaswap.
//
// Neither the name of the Polka Biome Ltd. nor the names of its contributors may be used
// to endorse or promote products derived from this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY Polka Biome Ltd. AS IS AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Polka Biome Ltd. BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//! Autogenerated weights for `vested_rewards`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-05, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `TRX40`, CPU: `AMD Ryzen Threadripper 3960X 24-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 1024

// Executed Command:
// ./target/release/framenode
// benchmark
// pallet
// --pallet
// vested-rewards
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// vested-rewards
// --execution=wasm
// --wasm-execution=compiled
// --chain
// local

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use common::weights::constants::EXTRINSIC_FIXED_WEIGHT;
use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `vested_rewards`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::WeightInfo for WeightInfo<T> {
	// Storage: VestedRewards Rewards (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:2 w:1)
	// Storage: VestedRewards TotalRewards (r:1 w:1)
	fn claim_rewards() -> Weight {
		(104_245_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: VestedRewards TotalRewards (r:1 w:0)
	// Storage: VestedRewards Rewards (r:3 w:2)
	/// The range of component `n` is `[0, 100]`.
	fn distribute_limits(n: u32, ) -> Weight {
		(7_184_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((11_933_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: VestedRewards TotalRewards (r:1 w:1)
	// Storage: VestedRewards Rewards (r:2 w:2)
	/// The range of component `n` is `[0, 100]`.
	fn update_rewards(n: u32, ) -> Weight {
		(9_593_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((5_839_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: VestedRewards CrowdloanInfos (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Technical TechAccounts (r:1 w:1)
	// Storage: VestedRewards CrowdloanUserInfos (r:0 w:1)
	/// The range of component `m` is `[1, 1000]`.
	fn register_crowdloan(m: u32, ) -> Weight {
		(42_093_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((4_157_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(m as Weight)))
	}
	// Storage: VestedRewards CrowdloanInfos (r:1 w:0)
	// Storage: VestedRewards CrowdloanUserInfos (r:1 w:1)
	// Storage: Tokens Accounts (r:10 w:10)
	// Storage: System Account (r:2 w:1)
	fn claim_crowdloan_rewards() -> Weight {
		(347_198_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(12 as Weight))
	}
}

impl crate::WeightInfo for () {
    fn claim_rewards() -> Weight {
        EXTRINSIC_FIXED_WEIGHT
    }

    fn distribute_limits(_n: u32) -> Weight {
        EXTRINSIC_FIXED_WEIGHT
    }

    fn update_rewards(_n: u32) -> Weight {
        EXTRINSIC_FIXED_WEIGHT
    }

    fn register_crowdloan(_m: u32) -> Weight {
        EXTRINSIC_FIXED_WEIGHT
    }

    fn claim_crowdloan_rewards() -> Weight {
        EXTRINSIC_FIXED_WEIGHT
    }
}